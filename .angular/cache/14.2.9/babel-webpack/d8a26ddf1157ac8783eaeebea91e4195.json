{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { API_URL, API_VERSION, TOKEN, AUTHENTICATED_USER, TOKEN_EXPIRED } from \"../app.constants\";\nimport { map } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\nimport { BadInput } from \"../common/bad-input\";\nimport { NotFoundError } from \"../common/not-found-error\";\nimport { NotAuthorizedError } from \"../common/not-authorized-error\";\nimport { AppError } from \"../common/app-error\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    executeJWTAuthenticationService(username, password) {\n      return this.http.post(`${API_URL}/${API_VERSION}/login`, {\n        username,\n        password\n      }).pipe(map(data => {\n        sessionStorage.setItem(AUTHENTICATED_USER, username);\n        sessionStorage.setItem(TOKEN, `${data.token}`);\n        return data;\n      })).catch(this.handleError);\n    }\n\n    refreshToken() {\n      return this.http.get(`${API_URL}/${API_VERSION}/users/refresh`);\n    }\n\n    getAuthenticatedUser() {\n      return sessionStorage.getItem(AUTHENTICATED_USER);\n    }\n\n    getAuthenticatedToken() {\n      if (this.getAuthenticatedToken) {\n        return sessionStorage.getItem(TOKEN);\n      }\n    }\n\n    isUserLoggedIn() {\n      const user = sessionStorage.getItem(AUTHENTICATED_USER);\n      return !(user === null);\n    }\n\n    isTokenExpired() {\n      const token = sessionStorage.getItem(TOKEN_EXPIRED);\n      return !(token === null);\n    }\n\n    getTokenExpiredMessage() {\n      return sessionStorage.getItem(TOKEN_EXPIRED);\n    }\n\n    logout() {\n      sessionStorage.removeItem(AUTHENTICATED_USER);\n      sessionStorage.removeItem(TOKEN);\n    }\n\n    handleError(error) {\n      if (error.status === 400) {\n        return Observable.throw(new BadInput(error.status, error[\"error\"]));\n      }\n\n      if (error.status === 404) {\n        return Observable.throw(new NotFoundError(error.status, error[\"error\"]));\n      }\n\n      if (error.status === 401) {\n        return Observable.throw(new NotAuthorizedError(error.status, error[\"error\"]));\n      }\n\n      return Observable.throw(new AppError(error));\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthenticationService;\n})();\nexport class AuthenticationBean {\n  constructor(message) {\n    this.message = message;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}