{"ast":null,"code":"import { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { DatePipe } from \"@angular/common\";\nimport { TaskService } from \"./services/task.service\";\nimport { AuthenticationService } from \"./auth/authentication.service\";\nimport { TimeService } from \"./services/data/time.service\";\nimport { ErrorService } from \"./services/data/error.service\";\nimport { MADE_CODES, TITLE_LENGTH_VALIDATOR, TITLE_REQUIRED_VALIDATOR, BODY_LENGTH_VALIDATOR, BODY_REQUIRED_VALIDATOR, DETAIL_DATE_FORMAT, DATE_FORMAT } from \"./app.constants\";\nimport { EventEmitter } from \"events\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./services/task.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"./auth/authentication.service\";\nimport * as i5 from \"./services/data/time.service\";\nimport * as i6 from \"./services/data/error.service\";\nexport let TaskEditComponent = /*#__PURE__*/(() => {\n  class TaskEditComponent {\n    constructor(route, taskService, datepipe, authService, router, timeService, errorService) {\n      this.route = route;\n      this.taskService = taskService;\n      this.datepipe = datepipe;\n      this.authService = authService;\n      this.router = router;\n      this.timeService = timeService;\n      this.errorService = errorService; // One window for create new and edit\n\n      this.editMode = false; // Constants to display in UI\n\n      this.title_length_validator = TITLE_LENGTH_VALIDATOR;\n      this.title_required_validator = TITLE_REQUIRED_VALIDATOR;\n      this.body_length_validator = BODY_LENGTH_VALIDATOR;\n      this.body_required_validator = BODY_REQUIRED_VALIDATOR;\n      this.dataChangedEvent = new EventEmitter();\n    }\n\n    ngOnInit() {\n      this.username = this.authService.getAuthenticatedUser();\n      this.date = new Date();\n      this.month = this.date.getMonth() + 1;\n      this.year = this.date.getFullYear();\n      this.dataChangedEvent.emit('important');\n      this.returnUrl = \"/\" + this.target + \"/\" + this.year + \"/\" + this.month; // Retrieve url parameters\n\n      this.route.params.subscribe(params => {\n        this.id = +params[\"id\"];\n        this.editMode = params[\"id\"] != null;\n        this.num = +params[\"num\"];\n      });\n\n      if (!this.editMode) {\n        this.route.params.subscribe(params => {\n          this.day = +params[\"day\"];\n          this.month = +params[\"month\"];\n          this.year = +params[\"year\"];\n          this.startDate = this.datepipe.transform(new Date(this.year, this.month - 1, this.day), DATE_FORMAT);\n          this.postedOn = this.datepipe.transform(new Date(), DETAIL_DATE_FORMAT);\n        }, error => {\n          this.errorService.displayMessage(error, this.returnUrl);\n        }); // Check for invalid date\n\n        if (this.timeService.checkDateInFuture(this.year, this.month, this.day)) {\n          this.errorService.dateInFutureMessage();\n          this.router.navigate([this.returnUrl]);\n        }\n      } // Initialize hidden form fields\n\n\n      this.initForm(this.startDate, this.postedOn);\n    }\n\n    onSubmit() {\n      if (this.editMode) {\n        // Edit\n        console.log(\"Message PATH (1)\");\n        this.taskService.updateTask(this.username, this.target, this.num, this.id, this.importantForm.value).subscribe(response => {\n          this.router.navigate([\"/\" + this.target + \"/\" + this.num + \"/\" + response[\"id\"] + \"/view\"]);\n        }, error => {\n          console.log(\"Message PATH (4)\");\n          this.errorService.displayMessage(error, this.returnUrl);\n        });\n      } else {\n        // New\n        this.taskService.createTask(this.username, this.target, this.num, this.importantForm.value).subscribe(response => {\n          this.router.navigate([\"/\" + this.target + \"/\" + this.num + \"/\" + response[\"id\"] + \"/view\"]);\n        }, error => {\n          this.errorService.displayMessage(error, this.returnUrl);\n        });\n      }\n    }\n\n    onDelete() {\n      if (this.editMode && confirm(\"Press a button!\\nEither OK or Cancel.\")) {\n        this.taskService.deleteTask(this.username, this.target, this.num, this.id).subscribe(response => {\n          this.router.navigate([\"/\" + this.target + \"/\" + this.year + \"/\" + this.month]);\n        }, error => {\n          this.errorService.displayMessage(error, this.returnUrl);\n        });\n      }\n    }\n\n    setTarget(target) {\n      this.target = target;\n    }\n\n    initForm(startDate, postedOn) {\n      const id = this.id;\n      const title = this.title;\n      const body = this.body;\n      const made = this.made; // Create form with Validators\n\n      this.importantForm = new FormGroup({\n        id: new FormControl(id),\n        title: new FormControl(title, [Validators.required, Validators.maxLength(40)]),\n        body: new FormControl(body, [Validators.required, Validators.maxLength(255)]),\n        made: new FormControl(made, Validators.required),\n        startDate: new FormControl(startDate, Validators.required),\n        postedOn: new FormControl(postedOn, Validators.required)\n      });\n\n      if (this.editMode) {\n        this.taskService.getTask(this.username, this.target, this.num, this.id).subscribe(important => {\n          this.importantForm.setValue({\n            \"id\": this.id,\n            \"title\": important.title,\n            \"body\": important.body,\n            \"made\": MADE_CODES[important.made],\n            \"startDate\": important.startDate,\n            \"postedOn\": this.datepipe.transform(new Date(), DETAIL_DATE_FORMAT)\n          });\n        }, error => {\n          this.errorService.displayMessage(error, this.returnUrl);\n        });\n        this.startDate = this.datepipe.transform(new Date(), DATE_FORMAT);\n        this.postedOn = this.datepipe.transform(new Date(), DETAIL_DATE_FORMAT);\n      }\n    }\n\n  }\n\n  TaskEditComponent.ɵfac = function TaskEditComponent_Factory(t) {\n    return new (t || TaskEditComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.TaskService), i0.ɵɵdirectiveInject(i3.DatePipe), i0.ɵɵdirectiveInject(i4.AuthenticationService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i5.TimeService), i0.ɵɵdirectiveInject(i6.ErrorService));\n  };\n\n  TaskEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskEditComponent,\n    selectors: [[\"ng-component\"]],\n    outputs: {\n      dataChangedEvent: \"dataChangedEvent\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function TaskEditComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return TaskEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}