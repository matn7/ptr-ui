{"ast":null,"code":"import { RegistrationService } from \"../registration.service\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { ErrorService } from \"../../services/data/error.service\";\nimport { EMAIL_REQUIRED_VALIDATOR, EMAIL_INVALID_VALIDATOR } from \"../../app.constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../registration.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/data/error.service\";\n\nfunction PasswordResetComponent_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.email_required_validator, \" \");\n  }\n}\n\nfunction PasswordResetComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.email_invalid_validator, \" \");\n  }\n}\n\nexport let PasswordResetComponent = /*#__PURE__*/(() => {\n  class PasswordResetComponent {\n    constructor(registrationService, router, errorService) {\n      this.registrationService = registrationService;\n      this.router = router;\n      this.errorService = errorService;\n      this.email_required_validator = EMAIL_REQUIRED_VALIDATOR;\n      this.email_invalid_validator = EMAIL_INVALID_VALIDATOR;\n    }\n\n    ngOnInit() {\n      this.returnUrl = \"/login\";\n      this.initForm();\n    }\n\n    requestResetPassword() {\n      this.registrationService.resetPassword(this.passwordResetForm.value).subscribe(response => {\n        this.router.navigate([\"/login\"]);\n      }, error => {\n        this.errorService.displayMessage(error, this.returnUrl);\n      });\n    }\n\n    initForm() {\n      const email = \"\";\n      this.passwordResetForm = new FormGroup({\n        email: new FormControl(email, [Validators.required, Validators.email])\n      });\n    }\n\n  }\n\n  PasswordResetComponent.ɵfac = function PasswordResetComponent_Factory(t) {\n    return new (t || PasswordResetComponent)(i0.ɵɵdirectiveInject(i1.RegistrationService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ErrorService));\n  };\n\n  PasswordResetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PasswordResetComponent,\n    selectors: [[\"app-password-reset\"]],\n    decls: 10,\n    vars: 4,\n    consts: [[1, \"pandatronik-mat-card\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"placeholder\", \"email\", \"formControlName\", \"email\", \"type\", \"text\", \"id\", \"email\", \"name\", \"email\", \"maxlength\", \"40\"], [4, \"ngIf\"], [\"type\", \"submit\", \"color\", \"primary\", \"mat-raised-button\", \"\", 3, \"disabled\"]],\n    template: function PasswordResetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function PasswordResetComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.requestResetPassword();\n        });\n        i0.ɵɵelementStart(2, \"mat-form-field\", 2)(3, \"mat-label\");\n        i0.ɵɵtext(4, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, PasswordResetComponent_mat_error_6_Template, 2, 1, \"mat-error\", 4);\n        i0.ɵɵtemplate(7, PasswordResetComponent_mat_error_7_Template, 2, 1, \"mat-error\", 4);\n        i0.ɵɵelementStart(8, \"button\", 5);\n        i0.ɵɵtext(9, \" Send \");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.passwordResetForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordResetForm.controls[\"email\"].touched && ctx.passwordResetForm.controls[\"email\"].hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordResetForm.controls[\"email\"].touched && ctx.passwordResetForm.controls[\"email\"].hasError(\"email\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.passwordResetForm.valid);\n      }\n    }\n  });\n  return PasswordResetComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}