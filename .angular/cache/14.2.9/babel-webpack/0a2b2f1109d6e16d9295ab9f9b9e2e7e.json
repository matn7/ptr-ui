{"ast":null,"code":"import { AuthenticationService } from \"../auth/authentication.service\";\nimport { Router } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { BadInput } from \"../common/bad-input\";\nimport { NotFoundError } from \"../common/not-found-error\";\nimport { NotAuthorizedError } from \"../common/not-authorized-error\";\nimport { AppError } from \"../common/app-error\";\nimport { RETURN_URL, TOKEN_EXPIRED } from \"../app.constants\";\nimport { UnsupportedMediaTypeError } from \"../common/unsupported-media-type-error\";\nimport { ServerError } from \"../common/server-error\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth/authentication.service\";\nimport * as i2 from \"@angular/router\";\nexport const INTERNAL_APP_ERROR = \"internalAppError\";\nexport let HandleErrorsService = /*#__PURE__*/(() => {\n  class HandleErrorsService {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n\n    displayErrorMessage(errorNumber, errorMsg, redirectUrl) {\n      console.log(\"Message PATH (6) \" + errorMsg);\n\n      if (errorNumber === 401) {\n        return this.handle401Error(redirectUrl, errorMsg);\n      }\n\n      if (errorNumber === 403) {\n        return \"Forbidden\";\n      }\n\n      if (errorNumber === 404) {\n        const stringifyErrMsg = JSON.stringify(errorMsg);\n        const parsedMsg = JSON.parse(stringifyErrMsg);\n        return parsedMsg.errorMessage;\n      }\n\n      if (errorNumber === 400) {\n        const stringifyErrMsg = JSON.stringify(errorMsg);\n        const parsedMsg = JSON.parse(stringifyErrMsg);\n\n        if (parsedMsg != null) {\n          return parsedMsg.body;\n        }\n\n        return \"BAD Request\";\n      }\n\n      if (errorNumber === 415) {\n        return \"Unsupported media type, you should not see this error :?\";\n      }\n\n      if (errorNumber === 500) {\n        return \"Server error\";\n      }\n    } // Used in http request user shoudl not see them\n\n\n    handleError(error) {\n      console.log(\"Message PATH (3) \" + error);\n\n      if (error.status === 400) {\n        return Observable.throw(new BadInput(error.status, error[\"error\"]));\n      }\n\n      if (error.status === 401) {\n        return Observable.throw(new NotAuthorizedError(error.status, error[\"error\"]));\n      }\n\n      if (error.status === 403) {\n        return Observable.throw(new NotAuthorizedError(error.status, error[\"error\"]));\n      }\n\n      if (error.status === 404) {\n        return Observable.throw(new NotFoundError(error.status, error[\"error\"]));\n      }\n\n      if (error.status === 415) {\n        return Observable.throw(new UnsupportedMediaTypeError(error.status, error[\"error\"]));\n      }\n\n      if (error.status === 500) {\n        return Observable.throw(new ServerError(error.status, error[\"error\"]));\n      }\n\n      return Observable.throw(new AppError(error));\n    }\n\n    handle401Error(redirectUrl, errorMsg) {\n      const stringifyErrMsg = JSON.stringify(errorMsg);\n      console.log(\"handle401Error\" + errorMsg);\n      const parsedMsg = JSON.parse(stringifyErrMsg);\n\n      if (parsedMsg.tokenExpired) {\n        console.log(\"Token expired\");\n        this.authService.logout();\n        sessionStorage.setItem(RETURN_URL, redirectUrl);\n        sessionStorage.setItem(TOKEN_EXPIRED, \"Token has expired need to log out\");\n        this.router.navigate([\"login\"], {\n          queryParams: {\n            returnUrl: redirectUrl\n          }\n        });\n        return parsedMsg.tokenExpired;\n      } else if (parsedMsg.username && parsedMsg.password) {\n        console.log(\"Invalid username or password\");\n        return parsedMsg.username + \" or \" + parsedMsg.password;\n      } else {\n        console.log(\"Max login attempts\");\n        return parsedMsg;\n      }\n    }\n\n  }\n\n  HandleErrorsService.ɵfac = function HandleErrorsService_Factory(t) {\n    return new (t || HandleErrorsService)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.Router));\n  };\n\n  HandleErrorsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HandleErrorsService,\n    factory: HandleErrorsService.ɵfac,\n    providedIn: \"root\"\n  });\n  return HandleErrorsService;\n})();","map":null,"metadata":{},"sourceType":"module"}