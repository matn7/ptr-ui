{"ast":null,"code":"import { RegistrationService } from \"../registration.service\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { ErrorService } from \"../../services/data/error.service\";\nimport { PASSWORD_LENGTH_VALIDATOR, PASSWORD_REQUIRED_VALIDATOR, PASSWORD_PATTERN_VALIDATOR } from \"../../app.constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../registration.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/data/error.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/card\";\n\nfunction PasswordChangeComponent_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.password_length_validator, \" \");\n  }\n}\n\nfunction PasswordChangeComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.password_required_validator, \" \");\n  }\n}\n\nfunction PasswordChangeComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.password_pattern_validator, \" \");\n  }\n}\n\nfunction PasswordChangeComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.password_length_validator, \" \");\n  }\n}\n\nfunction PasswordChangeComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.password_required_validator, \" \");\n  }\n}\n\nexport let PasswordChangeComponent = /*#__PURE__*/(() => {\n  class PasswordChangeComponent {\n    constructor(registrationService, router, route, errorService) {\n      this.registrationService = registrationService;\n      this.router = router;\n      this.route = route;\n      this.errorService = errorService;\n      this.password_length_validator = PASSWORD_LENGTH_VALIDATOR;\n      this.password_required_validator = PASSWORD_REQUIRED_VALIDATOR;\n      this.password_pattern_validator = PASSWORD_PATTERN_VALIDATOR;\n    }\n\n    ngOnInit() {\n      this.returnUrl = \"/login\";\n      this.route.queryParams.subscribe(params => {\n        this.id = params[\"id\"];\n        this.token = params[\"token\"];\n      });\n      this.initForm();\n    }\n\n    requestNewPassword() {\n      this.registrationService.newPassword(this.id, this.token, this.passwordChangeForm.value).subscribe(response => {\n        this.router.navigate([\"/login\"]);\n      }, error => {\n        this.errorService.displayMessage(error, this.returnUrl);\n      });\n    }\n\n    initForm() {\n      const password = \"\";\n      const confirmPassword = \"\";\n      this.passwordChangeForm = new FormGroup({\n        password: new FormControl(password, [Validators.required, Validators.minLength(6), Validators.maxLength(24)]),\n        confirmPassword: new FormControl(confirmPassword, [Validators.required])\n      });\n    }\n\n  }\n\n  PasswordChangeComponent.ɵfac = function PasswordChangeComponent_Factory(t) {\n    return new (t || PasswordChangeComponent)(i0.ɵɵdirectiveInject(i1.RegistrationService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ErrorService));\n  };\n\n  PasswordChangeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PasswordChangeComponent,\n    selectors: [[\"app-password-change\"]],\n    decls: 17,\n    vars: 7,\n    consts: [[1, \"pandatronik-mat-card\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"outline\", 1, \"full-width\"], [\"matInput\", \"\", \"placeholder\", \"password\", \"formControlName\", \"password\", \"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"maxlength\", \"60\"], [4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"confirmPassword\", \"formControlName\", \"confirmPassword\", \"type\", \"password\", \"id\", \"confirmPassword\", \"name\", \"confirmPassword\", \"maxlength\", \"60\"], [\"type\", \"submit\", \"color\", \"primary\", \"mat-raised-button\", \"\", 3, \"disabled\"]],\n    template: function PasswordChangeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function PasswordChangeComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.requestNewPassword();\n        });\n        i0.ɵɵelementStart(2, \"mat-form-field\", 2)(3, \"mat-label\");\n        i0.ɵɵtext(4, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, PasswordChangeComponent_mat_error_6_Template, 2, 1, \"mat-error\", 4);\n        i0.ɵɵtemplate(7, PasswordChangeComponent_mat_error_7_Template, 2, 1, \"mat-error\", 4);\n        i0.ɵɵtemplate(8, PasswordChangeComponent_mat_error_8_Template, 2, 1, \"mat-error\", 4);\n        i0.ɵɵelementStart(9, \"mat-form-field\", 2)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Confirm password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, PasswordChangeComponent_mat_error_13_Template, 2, 1, \"mat-error\", 4);\n        i0.ɵɵtemplate(14, PasswordChangeComponent_mat_error_14_Template, 2, 1, \"mat-error\", 4);\n        i0.ɵɵelementStart(15, \"button\", 6);\n        i0.ɵɵtext(16, \"Submit\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.passwordChangeForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordChangeForm.controls[\"password\"].touched && (ctx.passwordChangeForm.controls[\"password\"].hasError(\"minlength\") || ctx.passwordChangeForm.controls[\"password\"].hasError(\"maxlength\")));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordChangeForm.controls[\"password\"].touched && ctx.passwordChangeForm.controls[\"password\"].hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordChangeForm.controls[\"password\"].touched && ctx.passwordChangeForm.controls[\"password\"].hasError(\"pattern\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordChangeForm.controls[\"confirmPassword\"].touched && (ctx.passwordChangeForm.controls[\"confirmPassword\"].hasError(\"minlength\") || ctx.passwordChangeForm.controls[\"confirmPassword\"].hasError(\"maxlength\")));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordChangeForm.controls[\"confirmPassword\"].touched && ctx.passwordChangeForm.controls[\"confirmPassword\"].hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.passwordChangeForm.valid);\n      }\n    },\n    dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.MaxLengthValidator, i5.FormGroupDirective, i5.FormControlName, i6.MatError, i6.MatFormField, i6.MatLabel, i7.MatInput, i8.MatButton, i9.MatCard]\n  });\n  return PasswordChangeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}