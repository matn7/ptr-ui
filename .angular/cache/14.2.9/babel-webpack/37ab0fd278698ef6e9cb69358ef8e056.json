{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { API_URL, API_VERSION } from \"../app.constants\";\nimport { RequestOptions } from \"http\";\nimport { HandleErrorsService } from \"./handle-errors.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./handle-errors.service\";\nexport let TaskService = /*#__PURE__*/(() => {\n  class TaskService {\n    constructor(http, handleErrorService) {\n      this.http = http;\n      this.handleErrorService = handleErrorService;\n    }\n\n    getTaskIndexData(username, target, year, month) {\n      return this.http.get(`${API_URL}/${API_VERSION}/users/${username}/${target}/${year}/${month}`).catch(this.handleErrorService.handleError);\n    }\n\n    getTask(username, target, num, id) {\n      return this.http.get(`${API_URL}/${API_VERSION}/users/${username}/${target}/${num}/${id}`).catch(this.handleErrorService.handleError);\n    }\n\n    createTask(username, target, num, resource) {\n      return this.http.post(`${API_URL}/${API_VERSION}/users/${username}/${target}/${num}`, resource).catch(this.handleErrorService.handleError);\n    }\n\n    updateTask(username, target, num, id, resource) {\n      // JSON.stringify({ isRead: true })\n      const headers = new Headers({\n        \"Content-Type\": \"application/json\"\n      });\n      const options = new RequestOptions({\n        headers: headers\n      });\n      console.log(\"Message PATH (2)\");\n      return this.http.put(`${API_URL}/${API_VERSION}/users/${username}/${target}/${num}/${id}`, resource).catch(this.handleErrorService.handleError);\n    }\n\n    deleteTask(username, target, num, id) {\n      this.month = new Date().getMonth() + 1;\n      this.year = new Date().getFullYear();\n      return this.http.delete(`${API_URL}/${API_VERSION}/users/${username}/${target}/${num}/${id}`).catch(this.handleErrorService.handleError);\n    }\n\n  }\n\n  TaskService.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HandleErrorsService));\n  };\n\n  TaskService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: \"root\"\n  });\n  return TaskService;\n})();","map":null,"metadata":{},"sourceType":"module"}