{"ast":null,"code":"import { RegistrationService } from \"../registration.service\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { HandleErrorsService } from \"../../services/handle-errors.service\";\nimport { USER_CREATED_MSG, USERNAME_LENGTH_VALIDATOR, USERNAME_REQUIRED_VALIDATOR, PASSWORD_LENGTH_VALIDATOR, PASSWORD_REQUIRED_VALIDATOR, USERNAME_DUPLICATED_VALIDATOR, EMAIL_REQUIRED_VALIDATOR, EMAIL_INVALID_VALIDATOR, FIRSTNAME_REQUIRED_VALIDATOR, LASTNAME_REQUIRED_VALIDATOR, PASSWORD_PATTERN_VALIDATOR } from \"../../app.constants\";\nimport { ErrorService } from \"../../services/data/error.service\";\nimport { MatchPassword } from \"../validators/match-password\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../validators/match-password\";\nimport * as i2 from \"../registration.service\";\nimport * as i3 from \"../../services/handle-errors.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../../services/data/error.service\";\nimport * as i6 from \"../../shared/input/input.component\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/card\";\nexport let RegistrationComponent = /*#__PURE__*/(() => {\n  class RegistrationComponent {\n    constructor(matchPassword, registrationService, handleError, router, errorService) {\n      this.matchPassword = matchPassword;\n      this.registrationService = registrationService;\n      this.handleError = handleError;\n      this.router = router;\n      this.errorService = errorService;\n      this.username_length_validator = USERNAME_LENGTH_VALIDATOR;\n      this.username_required_validator = USERNAME_REQUIRED_VALIDATOR;\n      this.username_duplicated_validator = USERNAME_DUPLICATED_VALIDATOR;\n      this.password_length_validator = PASSWORD_LENGTH_VALIDATOR;\n      this.password_required_validator = PASSWORD_REQUIRED_VALIDATOR;\n      this.password_pattern_validator = PASSWORD_PATTERN_VALIDATOR;\n      this.email_required_validator = EMAIL_REQUIRED_VALIDATOR;\n      this.email_invalid_validator = EMAIL_INVALID_VALIDATOR;\n      this.firstname_required_validator = FIRSTNAME_REQUIRED_VALIDATOR;\n      this.lastname_required_validator = LASTNAME_REQUIRED_VALIDATOR;\n    }\n\n    ngOnInit() {\n      this.returnUrl = \"/register\";\n      this.isDuplicated = false;\n      this.initForm();\n    }\n\n    registerNewUser() {\n      this.registrationService.createNewUser(this.registrationForm.value).subscribe(response => {\n        this.router.navigate([\"/login\"]);\n        this.errorService.displayBackendMessage(USER_CREATED_MSG);\n      }, error => {\n        this.isDuplicated = true;\n        this.errorMessage = this.handleError.displayErrorMessage(error.errorStatus, error.errorMsg, this.returnUrl);\n        this.errorService.displayBackendMessage(this.errorMessage);\n      });\n    }\n\n    initForm() {\n      const username = this.username;\n      const password = this.password;\n      const confirmPassword = this.confirmPassword;\n      const email = this.email;\n      const firstName = this.firstName;\n      const lastName = this.lastName;\n      this.registrationForm = new FormGroup({\n        username: new FormControl(username, [Validators.required, Validators.minLength(6), Validators.maxLength(50)]),\n        password: new FormControl(password, [Validators.required, Validators.minLength(6), Validators.maxLength(60) // Validators.pattern(\"^(?=.*?\\\\p{Lu})(?=.*?\\\\p{Ll})(?=.*?\\\\d)(?=.*?[`~!@#$%^&*()\\\\-_=+\\\\\\\\|\\\\[{\\\\]};:'\\\",<.>/?]).*$\")]\n        ]),\n        confirmPassword: new FormControl(confirmPassword, [Validators.required, Validators.minLength(6), Validators.maxLength(60) // Validators.pattern('[a-zA-Z ]*')\n        // Validators.pattern(\"^(?=.*?\\\\p{Lu})(?=.*?\\\\p{Ll})(?=.*?\\\\d)(?=.*?[`~!@#$%^&*()\\\\-_=+\\\\\\\\|\\\\[{\\\\]};:'\\\",<.>/?]).*$\")\n        ]),\n        email: new FormControl(email, [Validators.required, Validators.email]),\n        firstName: new FormControl(firstName, Validators.required),\n        lastName: new FormControl(lastName, Validators.required)\n      }, {\n        validators: [this.matchPassword.validate]\n      });\n    }\n\n  }\n\n  RegistrationComponent.ɵfac = function RegistrationComponent_Factory(t) {\n    return new (t || RegistrationComponent)(i0.ɵɵdirectiveInject(i1.MatchPassword), i0.ɵɵdirectiveInject(i2.RegistrationService), i0.ɵɵdirectiveInject(i3.HandleErrorsService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.ErrorService));\n  };\n\n  RegistrationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegistrationComponent,\n    selectors: [[\"app-registration\"]],\n    decls: 10,\n    vars: 8,\n    consts: [[1, \"pandatronik-mat-card\"], [3, \"formGroup\", \"ngSubmit\"], [\"controlType\", \"input\", \"placeholder\", \"username\", \"title\", \"username\", \"label\", \"Username\", 3, \"control\"], [\"controlType\", \"password\", \"inputType\", \"password\", \"placeholder\", \"password\", \"title\", \"password\", \"label\", \"Password\", 3, \"control\"], [\"controlType\", \"password\", \"inputType\", \"password\", \"placeholder\", \"confirm password\", \"title\", \"confirm password\", \"label\", \"Confirm password\", 3, \"control\"], [\"controlType\", \"input\", \"placeholder\", \"email\", \"title\", \"email\", \"label\", \"Email\", 3, \"control\"], [\"controlType\", \"input\", \"placeholder\", \"first name\", \"title\", \"first name\", \"label\", \"First name\", 3, \"control\"], [\"controlType\", \"input\", \"placeholder\", \"last name\", \"title\", \"last name\", \"label\", \"Last name\", 3, \"control\"], [\"type\", \"submit\", \"color\", \"primary\", \"mat-raised-button\", \"\", 3, \"disabled\"]],\n    template: function RegistrationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function RegistrationComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.registerNewUser();\n        });\n        i0.ɵɵelement(2, \"app-input\", 2)(3, \"app-input\", 3)(4, \"app-input\", 4)(5, \"app-input\", 5)(6, \"app-input\", 6)(7, \"app-input\", 7);\n        i0.ɵɵelementStart(8, \"button\", 8);\n        i0.ɵɵtext(9, \"Submit\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.registrationForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"control\", ctx.registrationForm.get(\"username\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"control\", ctx.registrationForm.get(\"password\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"control\", ctx.registrationForm.get(\"confirmPassword\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"control\", ctx.registrationForm.get(\"email\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"control\", ctx.registrationForm.get(\"firstName\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"control\", ctx.registrationForm.get(\"lastName\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.registrationForm.valid);\n      }\n    },\n    dependencies: [i6.InputComponent, i7.ɵNgNoValidate, i7.NgControlStatusGroup, i7.FormGroupDirective, i8.MatButton, i9.MatCard],\n    encapsulation: 2\n  });\n  return RegistrationComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}