{"ast":null,"code":"import { Router } from \"@angular/router\";\nimport { AuthenticationService } from \"../authentication.service\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { TOKEN_EXPIRED, RETURN_URL, USERNAME_LENGTH_VALIDATOR, PASSWORD_LENGTH_VALIDATOR, USERNAME_REQUIRED_VALIDATOR, PASSWORD_REQUIRED_VALIDATOR } from \"../../app.constants\";\nimport { ErrorService } from \"../../services/data/error.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../authentication.service\";\nimport * as i3 from \"../../services/data/error.service\";\nimport * as i4 from \"../../shared/input/input.component\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/card\";\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(router, authenticationService, errorService) {\n      this.router = router;\n      this.authenticationService = authenticationService;\n      this.errorService = errorService;\n      this.errorMessage = \"Invalid Credentials\";\n      this.tokenExpiredMessage = \"\";\n      this.invalidLogin = false;\n      this.expiredToken = false;\n      this.username_length_validator = USERNAME_LENGTH_VALIDATOR;\n      this.username_required_validator = USERNAME_REQUIRED_VALIDATOR;\n      this.password_length_validator = PASSWORD_LENGTH_VALIDATOR;\n      this.password_required_validator = PASSWORD_REQUIRED_VALIDATOR;\n    }\n\n    ngOnInit() {\n      this.expiredToken = this.authenticationService.isTokenExpired();\n\n      if (this.expiredToken) {\n        this.tokenExpiredMessage = this.authenticationService.getTokenExpiredMessage();\n      }\n\n      this.returnUrl = \"/login\";\n      this.initForm();\n    }\n\n    handleJWTAuthLogin() {\n      this.username = this.loginForm.value.username;\n      this.password = this.loginForm.value.password;\n      console.log(\">>>>> username: \" + this.username);\n      this.authenticationService.executeJWTAuthenticationService(this.username, this.password).subscribe(data => {\n        if (sessionStorage.getItem(\"returnUrl\") != null) {\n          this.router.navigate([sessionStorage.getItem(\"returnUrl\")]);\n        } else {\n          this.router.navigate([\"welcome\", this.username]);\n        }\n\n        sessionStorage.removeItem(RETURN_URL);\n\n        if (sessionStorage.getItem(TOKEN_EXPIRED)) {\n          sessionStorage.removeItem(TOKEN_EXPIRED);\n        }\n\n        this.invalidLogin = false;\n      }, error => {\n        this.invalidLogin = true;\n        console.log(error);\n        this.errorService.displayMessage(error, this.returnUrl);\n      });\n    }\n\n    initForm() {\n      const username = this.username;\n      const password = this.password;\n      this.loginForm = new FormGroup({\n        username: new FormControl(username, [Validators.required, Validators.minLength(6), Validators.maxLength(50)]),\n        password: new FormControl(password, [Validators.required, Validators.minLength(6), Validators.maxLength(60)])\n      });\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.ErrorService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 9,\n    vars: 4,\n    consts: [[1, \"pandatronik-mat-card\"], [3, \"formGroup\", \"ngSubmit\"], [\"controlType\", \"input\", \"placeholder\", \"username\", \"title\", \"username\", \"label\", \"Username\", 3, \"control\"], [\"controlType\", \"password\", \"inputType\", \"password\", \"placeholder\", \"password\", \"title\", \"password\", \"label\", \"Password\", 3, \"control\"], [\"type\", \"submit\", \"color\", \"primary\", \"mat-raised-button\", \"\", 3, \"disabled\"], [\"type\", \"button\", \"color\", \"accent\", \"mat-raised-button\", \"\", \"routerLink\", \"/forgotpassword\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.handleJWTAuthLogin();\n        });\n        i0.ɵɵelement(2, \"app-input\", 2)(3, \"app-input\", 3);\n        i0.ɵɵelementStart(4, \"button\", 4);\n        i0.ɵɵtext(5, \"Submit\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(6, \"br\");\n        i0.ɵɵelementStart(7, \"button\", 5);\n        i0.ɵɵtext(8, \"Forgot password\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"control\", ctx.loginForm.get(\"username\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"control\", ctx.loginForm.get(\"password\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.loginForm.valid);\n      }\n    },\n    dependencies: [i4.InputComponent, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i6.MatButton, i7.MatCard],\n    encapsulation: 2\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}